# correct typos
[help]
	autocorrect = 1

[core]
	excludesfile = ~/.gitignore
	logAllRefUpdates = true
	; https://tekin.co.uk/2020/10/better-git-diff-output-for-ruby-python-elixir-and-more
	attributesfile = ~/.gitattributes
	; let the $EDITOR variable decide that
	; editor = vim

[alias]
	a = add
	aa = add -A
	b = branch
	remove-local = "!git branch | grep -v \"master\" | xargs git branch -D"
	del = branch -D
	; either 2 arguments: `from` and `to`, or just `to` if you're on the branch already
	rename = "!f() { [[ $# = 2 ]] && local from=$1 || local from=`git symbolic-ref -q --short HEAD`; local to=${2:-$1}; git branch -m $from $to; git push --no-verify origin :$from $to; git push --no-verify origin -u $to; }; f"
	c = commit
	amend = commit --amend
	abort = "!git rebase --abort 2>/dev/null || git merge --abort 2>/dev/null || git cherry-pick --abort 2>/dev/null"
	cl = "!f() { [[ \"$*\" =~ ^.*(https?:|git@|git:).*$ || \"$*\" =~ ^.*(\\.git[[:space:]]).*$  || \"$*\" =~ ^.*(\\.git)$ ]] && git clone \"$@\" || gh repo clone -- \"$@\"; }; f"
	co = checkout
	contains = describe --all --contains
	d = diff
	d = diff
	ds = diff --staged
	dt = difftool
	dts = difftool --staged
	f = fetch
	graph = log --graph --pretty=oneline --abbrev-commit --decorate --all
	l = log
	track = update-index --no-assume-unchanged
	untrack = update-index --assume-unchanged
	w = worktree
	wt = worktree
	wa = worktree add
	wr = worktree remove
	wl = worktree list
	wm = worktree move

	# requires FZF
	autofixup = "!f() { COMMIT=$(git log --pretty=oneline | fzf | awk '{print $1}'); git commit --fixup $COMMIT; GIT_SEQUENCE_EDITOR=: git rebase --autostash --autosquash -i $COMMIT^; }; f"

	# fshow - git commit browser
	# https://gist.github.com/junegunn/f4fca918e937e6bf5bad#gistcomment-1666125
	fshow = "!f() { \
		git log --graph --color=always \
			--format=\"%C(auto)%h%d %s %C(black)%C(bold)%cr\" \"$@\" | \
		fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
			--bind \"ctrl-m:execute: \
				echo {} | grep -o '[a-f0-9]\\{7\\}' | head -1 | \
                xargs -I % sh -c 'git show --color=always % | less -R' \"; \
	}; f"

	last = log -1 HEAD
	file-commits = "!f() { git log --pretty=\"%H\" --follow \"$1\"; }; f"
	file-commits-since = "!f() { git log --pretty=\"%H\" --follow ${2:-master}.. \"$1\"; }; f"
	m = merge
	mt = mergetool
	# https://stackoverflow.com/a/50056710
	default = "!f() { REMOTE=$(git remote); BRANCH=$(LC_ALL=C git remote show $REMOTE | grep \"HEAD branch\" | sed 's/.*: //'); git checkout $BRANCH; }; f"
	master = checkout master
	main = checkout main
	p = push
	pu = pull
	r = reset
	rh = reset --hard
	rs = reset --soft
	hard = reset --hard
	soft = reset --soft
	unstage = reset HEAD
	re = rebase
	s = status
	sa = submodule add
	si = submodule init
	su = submodule update
	ss = submodule status
	st = stash
	save = stash save
	pop = stash pop
	sub = submodule
	t = tag
	set-url = remote set-url origin
	modified = ls-files --modified --others --exclude-standard
	staged = diff --name-only --cached
	# custom functions
	changelog = "!git log --oneline --no-merges $1..HEAD"
	difference = "!git log --oneline $1..$2"
	# refresh the date of commits (https://dev.to/konstantin/refresh-commit-date-2cnh)
	refresh-date = "!f() { git rebase HEAD~$1 --ignore-date; }; f"
	local = "!git log --oneline --no-merges origin/$(git rev-parse --abbrev-ref HEAD).."
	mindiff = diff -w --word-diff-regex=. --color-words -U0
	overview = log --all --since='2 weeks' --oneline --no-merges
	recent = "!git for-each-ref --count=10 --sort=-committerdate refs/heads/ --format=\"%(refname:short)\" | fzf --no-sort --bind='ctrl-m:execute(git checkout {})+abort'"
	sneak = commit -a --amend --no-edit
	stats = shortlog -sn
	; --no-merges to hide merge commits
	today = "!git log --since='00:00:00' --all --decorate --oneline --author=$(git config user.email)"
	yesterday = "!git log --since='1 day ago 00:00:00' --before='1 day ago 23:59:59' --all --decorate --oneline --author=$(git config user.email)"
	last-friday="!git log --since='last friday 00:00:00' --before='last friday 23:59:59' --all --decorate --oneline --author=$(git config user.email)"
	wdiff = diff --word-diff
	upstream = "!git fetch && git log --oneline --no-merges ..origin/$(git rev-parse --abbrev-ref HEAD)"
	zip-modified = "!zip modified.zip $(git modified && git staged)"
	; open = "!gh repo view --web"
	o = !git open
	code = open
	view = open
	user = "!gh api user | sed -E 's/.*\"login\":\"?([^,\"]*)\"?.*/\\1/'"
	repos = "!repos() { local user=\"${1?}\";shift 1; gh api --paginate graphql -f user=\"$user\" \"$@\" \
		-f query='query($user: String!, $per_page: Int = 100, $after: String) { user(login: $user) { \
		repositories(first: $per_page, after: $after) { nodes { nameWithOwner }, pageInfo { hasNextPage, endCursor } } } }';}; \
		repos \"$(git user)\" | sed -E 's/}/\\\n/g' | grep \"nameWithOwner\" | sed -E 's/.*\"nameWithOwner\":\"?([^,\"]*)\"?.*/\\1/g'"
	repo = "!gh api repos/:owner/:repo | sed -E 's/.*\"full_name\":\"?([^,\"]*)\"?.*/\\1/'"
	rename-repo = "!f() { gh api -XPATCH repos/:owner/:repo -f name=$1 | grep -e \"ssh_url\" | sed -E 's/.*\"ssh_url\":\"?([^,\"]*)\"?.*/\\1/' | xargs git set-url; }; f"
	# git comment 7 "some comment"
	comment = "!f() { gh api --silent \"repos/:owner/:repo/issues/$1/comments\" --raw-field \"body=$2\"; }; f"
	; alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /

[push]
	# https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushautoSetupRemote
	autoSetupRemote = true
	# push easily. http://stackoverflow.com/a/23918418/89484
	default = current

# use separate file for username / github token / etc
[include]
	# user name and email only
	path = ~/.gitconfig.user.local
	# other local configuration
	path = ~/.gitconfig.local

[color]
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	ui = true
	pager = true

[color "diff"]
	meta = 11
	commit = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[mergetool]
	prompt = false

[difftool]
	prompt = false

[credential]
	UseHttpPath = true

[init]
	defaultBranch = main
